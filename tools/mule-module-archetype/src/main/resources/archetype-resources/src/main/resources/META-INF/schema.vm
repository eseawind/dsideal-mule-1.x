#set($D = '$')
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsd:schema xmlns="http://www.mulesoft.org/schema/mule/${ModuleNameLower}"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:mule="http://www.mulesoft.org/schema/mule/core"
            xmlns:schemadoc="http://www.mulesoft.org/schema/mule/schemadoc"
            targetNamespace="http://www.mulesoft.org/schema/mule/${ModuleNameLower}"
            elementFormDefault="qualified"
            attributeFormDefault="unqualified">

    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:import namespace="http://www.mulesoft.org/schema/mule/core"
                schemaLocation="http://www.mulesoft.org/schema/mule/core/${MuleMajorMinorVersion}/mule.xsd" />
    <xsd:import namespace = "http://www.mulesoft.org/schema/mule/schemadoc"
                schemaLocation = "http://www.mulesoft.org/schema/mule/schemadoc/${MuleMajorMinorVersion}/mule-schemadoc.xsd"/>

    <xsd:annotation>
        <xsd:documentation>${description}</xsd:documentation>
        <xsd:appinfo>
            <schemadoc:short-name>${ModuleName}</schemadoc:short-name>
            <schemadoc:page-title>${ModuleName} ${ModuleType}</schemadoc:page-title>
#if($ModuleType == "Transport")
    #set($receive = "false")
    #if($hasReceiver == "y")
      #set($receive = "true")
    #end
    #set($dispatch = "false")
    #if($hasDispatcher == "y")
      #set($dispatcher = "true")
    #end
    #set($request = "false")
    #if($hasRequestor == "y")
      #set($request = "true")
    #end
    #set($transactions = "false")
    #if($hasTransactions == "y")
      #set($transactions = "true")
    #end
    #set($response = "true")
    #set($streaming = "false")
            <schemadoc:transport-features
            receiveEvents="${receive}" dispatchEvents="${dispatch}" responseEvents="${response}"
                                          requestEvents="${request}"
                                          transactions="${transactions}" streaming="${streaming}">
                <schemadoc:inboundMEPs in-only="${receiver}" in-optional-out="${response}" in-out="${response}"/>
                <schemadoc:outboundMEPs out-only="${dispatcher}" out-in="${response}" out-optional-in="${response}"/>
            </schemadoc:transport-features>
#end
        </xsd:appinfo>
    </xsd:annotation>


    <!--
    TODO define the emelements that can be used to configure components in ths module.

    Mule provides a set of base schema types for all elements in Mule such as -
    - Transformers
    - Inbound and Outbound Routers
    - Filters
    - etc

    For example -

    <xsd:element name="is-xml-filter" type="mule:abstractFilterType" substitutionGroup="mule:abstract-filter"/>

    <xsd:complexType name="xmlTransformerType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractTransformerType">
                <xsd:attribute name="outputEncoding" type="xsd:string"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="dom-to-xml" type="xmlTransformerType" substitutionGroup="mule:abstract-transformer"/>
    -->

    <!--

    When writing schema for simple property types you can just add xsd:attribute elements
    For complex properties with multiple values you can add custom elements and register
    a definition parser with ${ModuleNameLower}NamespaceHandler.

    For example -

    <xsd:attribute name="swizzleSize" type="mule:substitutableInt">
        <xsd:annotation>
            <xsd:documentation>
                Sets the amount of swizzle available for your twizzle
            </xsd:documentation>
        </xsd:annotation>
    </xsd:attribute>

    Note the type of the attribute is mule:substitutableInt.  For non-string simple
    types you should use mule:substitutableBoolean, mule:substitutableLong, etc since
    these types allow property placeholders to be used instead of the actual value.
    The property can then be set according to the properties available to the MUle instance. i.e

    <${ModuleNameLower}:some-filter name="smallTwizzler" swizzlerSize="${D}{small.swizzle}"/>

    where small.swizzle is set in a properties files or system property.  This makes it easy
    to use the same config file for differnet environments such as Developement, UAT and Production

    -->

</xsd:schema>

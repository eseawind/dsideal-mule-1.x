# This file is the service descriptor for your transport
# It ties all the implementation classes together so that Mule can
# construct endpoints for your transport protocol at runtime
# For a full list of properties that can be set here see -
# ${ServiceDescriptorDocumentationUrl}

# The connector class for your transport. This is always required
connector=org.mule.transport.${ModuleNameLower}.${ModuleName}Connector

#if( $hasCustomMessageFactory == "y")
# The message factory is used to convert the message received from the transport to an
# instance of MuleMessage
message.factory=org.mule.transport.${ModuleNameLower}.${ModuleName}MuleMessageFactory
#else
message.factory=org.mule.transport.DefaultMuleMessageFactory
#end

#if( $hasDispatcher == "y")
# The factory used to create dispatchers responsible for sending events from the underlying technology
dispatcher.factory=org.mule.transport.${ModuleNameLower}.${ModuleName}MessageDispatcherFactory
#end

#if( $hasReceiver == "y")
# The standard message receiver used to consume events from the underlying technology
message.receiver=org.mule.transport.${ModuleNameLower}.${ModuleName}MessageReceiver
#end

#if( $hasRequestor == "y" )
#The standard message requester used to request data from the underlying technology
requester.factory=org.mule.transport.${ModuleNameLower}.${ModuleName}MessageRequesterFactory
#end

#if( $hasTransactions == "y")
# The message receiver to use if the endpoint is marked as transacted.
transacted.message.receiver=org.mule.transport.${ModuleNameLower}.${ModuleName}TransactedMessageReceiver
#end

#if( $inboundTransformer && $inboundTransformer != "n")
# The Default inbound transformer for this component
inbound.transformer=org.mule.transport.${ModuleNameLower}.transformers.$inboundTransformer
#end

#if( $outboundTransformer && $outboundTransformer != "n")
# The Default outbound transformer for this component
outbound.transformer=org.mule.transport.${ModuleNameLower}.transformers.$outboundTransformer

# The response transformer is used to convert a response back to a client, usually the outbound transformer does the same thing
response.transformer=org.mule.transport.${ModuleNameLower}.transformers.$outboundTransformer
#end

# Defines the way in which endpoints for your transport will be constructed
# Options are (but you can write your own) -
#     org.mule.endpoint.ResourceNameEndpointURIBuilder i.e. vm://my.queue
#     org.mule.endpoint.UrlEndpointURIBuilder i.e. cxf:http://localhost:1234/context/Service?params
#     org.mule.endpoint.SocketEndpointURIBuilder i.e. udp://localhost:2222
#if($endpointBuilder == "r")
endpoint.builder=org.mule.endpoint.ResourceNameEndpointURIBuilder
#elseif($endpointBuilder == "u")
endpoint.builder=org.mule.endpoint.UrlEndpointURIBuilder
#elseif($endpointBuilder == "s")
endpoint.builder=org.mule.endpoint.SocketEndpointURIBuilder
#else
endpoint.builder=org.mule.transport.${ModuleNameLower}.${ModuleName}EndpointURIBuilder
#end

#if( $hasReceiver == "y")
# The message exchange patterns supported for receiving messages
inbound.exchange.patterns=one-way, request-response
#end
#if( $hasDispatcher == "y")
# The message exchange patterns supported for sending messages
outbound.exchange.patterns=one-way, request-response
#end
# The message exchange pattern to use when none is configured on an endpoint
default.exchange.pattern=one-way

# For more information see - ${ServiceDescriptorDocumentationUrl}

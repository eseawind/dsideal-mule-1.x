/*
 * Generated by the Mule Catalog Archetype. http://mule.mulesoft.org
 */

package ${patternPackageName};

import org.apache.commons.lang.RandomStringUtils;
import org.mule.api.MuleEvent;
import org.mule.construct.AbstractFlowConstruct;
import org.mule.construct.AbstractFlowConstuctTestCase;
import org.mule.tck.MuleTestUtils;
#if($patternType == "siso")
import org.mule.MessageExchangePattern;
import org.mule.api.endpoint.OutboundEndpoint;
import org.mule.api.transport.Connector;
#end

#if($patternType != "mp")
import org.junit.Test;
#end

import static org.junit.Assert.assertEquals;

public class ${patternClassName}TestCase extends AbstractFlowConstuctTestCase
{
    private ${patternClassName} ${patternVariableName};
#if($patternType == "siso")
    protected Connector testConnector;
#end

    @Override
    protected void doSetUp() throws Exception
    {
        super.doSetUp();
#if($patternType == "mp")
        ${patternVariableName} = new ${patternClassName}("${patternTagName}-test", muleContext);
#elseif($patternType == "ms" || $patternType == "si")
        ${patternVariableName} = new ${patternClassName}("${patternTagName}-test", muleContext, directInboundMessageSource);
#else
        final OutboundEndpoint testOutboundEndpoint = MuleTestUtils.getTestOutboundEndpoint(
            MessageExchangePattern.REQUEST_RESPONSE, muleContext);
        testConnector = testOutboundEndpoint.getConnector();
        muleContext.getRegistry().registerConnector(testConnector);
        testConnector.start();

        ${patternVariableName} = new ${patternClassName}("${patternTagName}-test", muleContext, directInboundMessageSource, testOutboundEndpoint);
#end
    }

    @Override
    protected AbstractFlowConstruct getFlowConstruct()
    {
        return ${patternVariableName};
    }

#if($patternType != "mp")

    @Test
    public void testMessageSource() throws Exception
    {
        ${patternVariableName}.initialise();
        ${patternVariableName}.start();

        final String testPayload = RandomStringUtils.randomAlphanumeric(10);
        final MuleEvent response = directInboundMessageSource.process(MuleTestUtils.getTestEvent(testPayload, muleContext));
        assertEquals(testPayload, response.getMessageAsString());
    }
#end
}

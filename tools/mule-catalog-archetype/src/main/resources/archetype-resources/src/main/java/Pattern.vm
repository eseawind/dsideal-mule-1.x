/*
 * Generated by the Mule Catalog Archetype. http://mule.mulesoft.org
 */

package ${patternPackageName};

import org.mule.api.MuleContext;
import org.mule.api.MuleException;
import org.mule.api.construct.FlowConstructInvalidException;
#if($patternType == "siso")
import org.mule.api.endpoint.OutboundEndpoint;
#end
#if($patternType != "mp")
import org.mule.api.source.MessageSource;
import org.mule.config.i18n.MessageFactory;
#end
import org.mule.api.processor.MessageProcessorChainBuilder;
import org.mule.construct.AbstractPipeline;
import org.mule.construct.processor.FlowConstructStatisticsMessageProcessor;
import org.mule.interceptor.LoggingInterceptor;

public class ${patternClassName} extends AbstractPipeline
{
#if($patternType == "siso")
    private final OutboundEndpoint outboundEndpoint;
    
#end
    // TODO add pattern-specific immutable attributes

    // TODO add pattern-specific constructor arguments
#if($patternType == "mp")
    public ${patternClassName}(String name, MuleContext muleContext) throws MuleException
#elseif($patternType == "ms" || $patternType == "si")
    public ${patternClassName}(String name, MuleContext muleContext, MessageSource messageSource) throws MuleException
#else
    public ${patternClassName}(String name, MuleContext muleContext, MessageSource messageSource, OutboundEndpoint outboundEndpoint) throws MuleException
#end
    {
        super(name, muleContext);
#if($patternType != "mp")

        if (messageSource == null)
        {
            throw new FlowConstructInvalidException(
                MessageFactory.createStaticMessage("messageSource can't be null on: " + this.toString()));
        }
        this.messageSource = messageSource;
#end
#if($patternType == "siso")

        if (outboundEndpoint == null)
        {
            throw new FlowConstructInvalidException(
                MessageFactory.createStaticMessage("outboundEndpoint can't be null on: " + this.toString()));
        }
        this.outboundEndpoint = outboundEndpoint;
#end

        // TODO set pattern-specific immutable attributes
    }

    @Override
    protected void validateConstruct() throws FlowConstructInvalidException
    {
        super.validateConstruct();

        // TODO perform additional validation on the pattern attributes

        // In case of error, use:
        // throw new FlowConstructInvalidException(MessageFactory.createStaticMessage("error description"), this);
    }

    @Override
    protected void configureMessageProcessors(MessageProcessorChainBuilder builder)
        throws MuleException
    {
        builder.chain(new LoggingInterceptor());
        builder.chain(new FlowConstructStatisticsMessageProcessor());

        // TODO add specific message processors to reify the expected pattern behavior
#if($patternType == "siso")
        
        builder.chain(outboundEndpoint);
#end
    }

    @Override
    public String getConstructType()
    {
        return "${patternClassName}";
    }
    
}

<archetype>
  <id>mule-catalog-archetype</id>
  <!--
    allows us to update an existing project if the archetype is run from
    the project directory
  -->
  <allowPartial>true</allowPartial>

  <variables>
    <variable>
      <name>patternTagName</name>
      <description>What XML tag name should be used for the new pattern?
      
(Prefer lower-case and use dashes as separators, like: my-pattern)
      </description>
    </variable>
    <variable>
      <name>patternFQCN</name>
      <description>What is the fully qualified class name of the new pattern?
      
(For example: com.acme.pattern.MyPattern
 Note that supporting classes will be created in: com.acme.pattern.builder and com.acme.pattern.config)</description>
    </variable>
    <variable>
      <name>patternType</name>
      <description>What will be the type of this pattern? [mp] or [ms] or [si] or [siso]
      
(Details of each type:
 mp:   the pattern is a pure message processor designed to be used within a flow alongside other message processors
 ms:   the pattern receives messages from any kind of message source, like endpoints or routers
 si:   the pattern receives messages from a single inbound endpoint
 siso: the pattern receives messages from a single inbound endpoint and dispatches to a single outbound endpoint)</description>
      <defvalue>mp</defvalue>
    </variable>
  </variables>
  
  <templates>
    <!-- the Pattern todo should be run first since it sets up other variables and is always included -->
    <template>
      <file>pattern.todo.vm</file>
      <output>${patternTagName}.todo</output>
    </template>
    <template>
      <file>src/main/java/Pattern.vm</file>
      <output>src/main/java/${patternPackageDir}/${patternClassName}.java</output>
    </template>
    <template>
      <file>src/test/java/PatternTestCase.vm</file>
      <output>src/test/java/${patternPackageDir}/${patternClassName}TestCase.java</output>
    </template>
    <template>
      <file>src/main/java/builder/PatternBuilder.vm</file>
      <output>src/main/java/${patternBuilderPackageDir}/${patternBuilderClassName}.java</output>
    </template>
    <template>
      <file>src/test/java/builder/PatternBuilderTestCase.vm</file>
      <output>src/test/java/${patternBuilderPackageDir}/${patternBuilderClassName}TestCase.java</output>
    </template>
    <template>
      <file>src/main/java/config/PatternFactoryBean.vm</file>
      <output>src/main/java/${patternConfigPackageDir}/${patternFactoryBeanClassName}.java</output>
    </template>
    <template>
      <file>src/main/java/config/PatternDefinitionParser.vm</file>
      <output>src/main/java/${patternConfigPackageDir}/${patternDefinitionParserClassName}.java</output>
    </template>
    <template>
      <file>src/test/java/config/PatternFunctionalTestCase.vm</file>
      <output>src/test/java/${patternConfigPackageDir}/${patternClassName}FunctionalTestCase.java</output>
    </template>
    <template>
      <file>src/test/resources/pattern-functional-test-config.vm</file>
      <output>src/test/resources/${patternTagName}-functional-test-config.xml</output>
    </template>
  </templates>
</archetype>

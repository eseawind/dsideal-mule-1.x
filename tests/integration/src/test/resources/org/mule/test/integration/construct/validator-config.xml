<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
  xmlns:test="http://www.mulesoft.org/schema/mule/test"
  xmlns:pattern="http://www.mulesoft.org/schema/mule/pattern"
  xmlns:spring="http://www.springframework.org/schema/beans"
  xsi:schemaLocation="
       http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
       http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
       http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/current/mule-test.xsd
       http://www.mulesoft.org/schema/mule/pattern http://www.mulesoft.org/schema/mule/pattern/current/mule-pattern.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd">

    <configuration useExtendedTransformations="false"/>

  <vm:endpoint name="test-service-channel"
               path="test-service.in"
               exchange-pattern="one-way" />

  <pattern:validator name="validator"
             inboundAddress="vm://validator.in"
             ackExpression="#[string:GOOD:#[message:payload]@#[context:serviceName]]"
             nackExpression="#[string:BAD:#[message:payload]@#[context:serviceName]]"
             outboundAddress="vm://test-service.in">
    <payload-type-filter expectedType="java.lang.Integer"/>
  </pattern:validator>

  <payload-type-filter name="int-payload-filter" expectedType="java.lang.Integer" />
    
  <vm:endpoint name="validator-with-refs-channel"
               path="validator-with-refs.in"
               exchange-pattern="one-way" />

  <pattern:validator name="validator-with-refs"
             inboundEndpoint-ref="validator-with-refs-channel"
             ackExpression="#[string:GOOD:#[message:payload]@#[context:serviceName]]"
             nackExpression="#[string:BAD:#[message:payload]@#[context:serviceName]]"
             validationFilter-ref="int-payload-filter"
             outboundEndpoint-ref="test-service-channel" />

  <pattern:validator name="validator-with-child-endpoints"
             ackExpression="#[string:GOOD:#[message:payload]@#[context:serviceName]]"
             nackExpression="#[string:BAD:#[message:payload]@#[context:serviceName]]"
             validationFilter-ref="int-payload-filter">
    <vm:inbound-endpoint path="validator-with-child-endpoints.in"
                         exchange-pattern="request-response" />
    <outbound-endpoint ref="test-service-channel" />
  </pattern:validator>

  <pattern:validator name="validator-with-exception-strategy"
             inboundAddress="vm://validator-with-exception-strategy.in"
             ackExpression="#[string:GOOD:#[message:payload]@#[context:serviceName]]"
             nackExpression="#[message:_invalid]"
             validationFilter-ref="int-payload-filter"
             outboundEndpoint-ref="test-service-channel">
    <custom-exception-strategy
             class="org.mule.test.integration.exceptions.TestExceptionStrategy" />
  </pattern:validator>
             
  <pattern:validator name="abstract-parent-validator"
             abstract="true"
             ackExpression="#[string:GOOD:#[message:payload]@#[context:serviceName]]"
             nackExpression="#[string:BAD:#[message:payload]@#[context:serviceName]]" />

  <pattern:validator name="concrete-validator"
             parent="abstract-parent-validator"
             inboundAddress="vm://concrete-validator.in"
             outboundAddress="vm://test-service.in">
    <payload-type-filter expectedType="java.lang.Integer"/>
  </pattern:validator>

  <pattern:validator name="dispatch-error"
             inboundAddress="vm://dispatch-error.in"
             ackExpression="#[string:GOOD:#[message:payload]@#[context:serviceName]]"
             nackExpression="#[string:BAD:#[message:payload]@#[context:serviceName]]"
             errorExpression="#[string:ERROR:#[message:payload]@#[context:serviceName]]"
             outboundAddress="http://localhost:8091/error"
             validationFilter-ref="int-payload-filter" />

  <!--
        Test support
  -->
  
  <!-- Can't use a SimpleService because test-service-channel is one-way -->
  <flow name="test-service">
    <inbound-endpoint ref="test-service-channel" />
    <test:component />
  </flow>
  
  <simple-service name="error-service" address="http://localhost:8091/error">
    <test:component throwException="true" />
  </simple-service>
</mule>

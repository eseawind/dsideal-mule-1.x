<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:spring="http://www.springframework.org/schema/beans"
      xmlns:test="http://www.mulesoft.org/schema/mule/test"
      xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
      xsi:schemaLocation="
               http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
               http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
               http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
               http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/current/mule-test.xsd">

    <!-- use a persistent object store to pinpoint any MuleEvent de/serialization issue -->
    <spring:bean id="objectStore" class="org.mule.util.store.PartitionedPersistentObjectStore" />

    <vm:endpoint name="dlqChannel" path="dlq" />

    <custom-processor name="dlq-mp" class="org.mule.test.routing.UntilSuccessfulTestCase$CustomMP"/>

    <flow name="minimal-config">
        <vm:inbound-endpoint path="input-1" exchange-pattern="one-way"/>
        <!-- with this configuration, the response from target MP won't be considered an error (no failureExpression) -->
        <until-successful objectStore-ref="objectStore">
            <flow-ref name="target-mp" />
        </until-successful>
    </flow>

    <flow name="full-config">
        <vm:inbound-endpoint path="input-2" exchange-pattern="request-response"/>
        <until-successful objectStore-ref="objectStore"
                          ackExpression="#[string:ACK]"
                          failureExpression="#[regex('(?i).*error')]"
                          maxRetries="2"
                          secondsBetweenRetries="1"
                          deadLetterQueue-ref="dlqChannel">
            <flow-ref name="target-mp" />
        </until-successful>
    </flow>

    <flow name="full-config-with-mp">
        <vm:inbound-endpoint path="input-2MP" exchange-pattern="request-response"/>
        <until-successful objectStore-ref="objectStore"
                          ackExpression="#[string:ACK]"
                          failureExpression="#[regex:(?i).*error]"
                          maxRetries="2"
                          secondsBetweenRetries="1"
                          deadLetterQueue-ref="dlq-mp">
            <flow-ref name="target-mp" />
        </until-successful>
    </flow>

    <flow name="retry-endpoint-config">
        <vm:inbound-endpoint path="input-3" exchange-pattern="one-way"/>
        <until-successful objectStore-ref="objectStore"
                          failureExpression="#[regex:(?i).*error]"
                          maxRetries="2"
                          secondsBetweenRetries="1">
            <vm:outbound-endpoint path="target-flow" exchange-pattern="request-response" />
        </until-successful>
    </flow>

    <flow name="target-mp">
        <test:component appendString="ERROR" />
    </flow>

    <flow name="target-flow">
        <vm:inbound-endpoint path="target-flow" exchange-pattern="request-response" />
        <flow-ref name="target-mp" />
    </flow>

    <flow name="dlq-processor">
        <inbound-endpoint ref="dlqChannel" />
        <test:component />
    </flow>

    <flow name="synchronous">
        <until-successful synchronous="true" secondsBetweenRetries="1">
            <test:component throwException="true"/>
        </until-successful>
    </flow>

    <flow name="synchronous-with-retry">
        <until-successful maxRetries="3" secondsBetweenRetries="0" synchronous="true">
            <processor-chain>
                <test:invocation-counter name="untilSuccessful"/>
                <test:component throwException="true"/>
            </processor-chain>
        </until-successful>
        <rollback-exception-strategy>
            <test:invocation-counter name="exceptionStrategy"/>
        </rollback-exception-strategy>
    </flow>

    <flow name="measureSynchronousWait">
        <until-successful maxRetries="1" secondsBetweenRetries="1" synchronous="true">
            <processor-chain>
                <custom-processor class="org.mule.test.routing.UntilSuccessfulTestCase$WaitMeasure" />
                <test:component throwException="true"/>
            </processor-chain>
        </until-successful>
    </flow>

    <flow name="asynchronous-using-threading-profile">
        <until-successful objectStore-ref="objectStore" maxRetries="3" secondsBetweenRetries="0">
            <threading-profile maxThreadsActive="1" maxThreadsIdle="1" poolExhaustedAction="RUN"/>
            <processor-chain>
                <test:invocation-counter name="untilSuccessful2"/>
                <test:component throwException="true"/>
            </processor-chain>
        </until-successful>
        <rollback-exception-strategy>
            <test:invocation-counter name="exceptionStrategy2"/>
        </rollback-exception-strategy>
    </flow>

</mule>

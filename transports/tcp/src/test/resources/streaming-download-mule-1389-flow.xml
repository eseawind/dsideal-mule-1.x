<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:spring="http://www.springframework.org/schema/beans"
    xmlns:tcp="http://www.mulesoft.org/schema/mule/tcp"
    xsi:schemaLocation="
               http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
               http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
               http://www.mulesoft.org/schema/mule/tcp http://www.mulesoft.org/schema/mule/tcp/current/mule-tcp.xsd">

    <!-- need to use the Streaming protocol for this test -->
    <!-- we need to keepSendSocketOpen when doing request response streaming 
        since the clinet call will complete before any data is actually read so we 
        need to keep the socket open to avoid a broken pipe -->
    <tcp:connector name="testStreaming"
        keepSendSocketOpen="true">
        <tcp:streaming-protocol />
    </tcp:connector>


    <flow name="testComponent">

        <!-- We have to set the synchronicity explicitly here (in the http 
            version of this we do not) Since we can't send any headers with the TCP transport 
            unless we use a customised protocol. In http the REMOTE_SYNC header is set 
            since the MuleClient.send(...) will automatically set it for us. (REMOTE_SYNC 
            from the client implies 'synchronsous' on the server) -->
        <tcp:inbound-endpoint host="localhost"
            port="${port1}" exchange-pattern="request-response" />

        <component>
            <singleton-object
                class="org.mule.transport.tcp.issues.InputStreamSource" />
        </component>
    </flow>

</mule>
        

<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:spring="http://www.springframework.org/schema/beans"
      xmlns:jdbc="http://www.mulesoft.org/schema/mule/jdbc"
      xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
       http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
       http://www.mulesoft.org/schema/mule/jdbc http://www.mulesoft.org/schema/mule/jdbc/current/mule-jdbc.xsd">

    <jdbc:derby-data-source name="jdbcDataSource1" url="jdbc:derby:muleEmbeddedDB"/>
    <jdbc:derby-data-source name="jdbcDataSource2" url="jdbc:derby:muleEmbeddedDB"/>

    <!--
        Do not change the name of this connector, AbstractJdbcFunctionalTestCase relies on the
        existence of a JDBC connector with this name.
     -->
    <jdbc:connector name="jdbcConnector" dataSource-ref="jdbcDataSource1" pollingFrequency="1000">
        <jdbc:query key="read" value="SELECT id, type, data FROM test WHERE type=1"/>
        <jdbc:query key="read.ack" value="UPDATE test SET type=2 WHERE id=#[map-payload:id]"/>
    </jdbc:connector>

    <jdbc:connector name="jdbcOUTConnector" dataSource-ref="jdbcDataSource2" pollingFrequency="10000">
        <jdbc:query key="write" value="INSERT INTO test_out(id, type, data) VALUES(#[map-payload:id], #[map-payload:type], #[map-payload:data])"/>
    </jdbc:connector>

    <model name="testing">
        <service name="bridge">
            <inbound>
                <jdbc:inbound-endpoint queryKey="read" connector-ref="jdbcConnector" exchange-pattern="one-way">
                    <jdbc:transaction action="ALWAYS_BEGIN"/>
                </jdbc:inbound-endpoint>
            </inbound>
            <outbound>
                <pass-through-router>
                    <jdbc:outbound-endpoint queryKey="write" connector-ref="jdbcOUTConnector"
                        exchange-pattern="one-way">
                        <jdbc:transaction action="NONE"/>
                    </jdbc:outbound-endpoint>
                </pass-through-router>
            </outbound>
        </service>
    </model>
</mule>
